package boLang.test.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeChild;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class assert_statement_Constraints extends BaseConstraintsDescriptor {
  public assert_statement_Constraints() {
    super(CONCEPTS.assert_statement$Y8);
  }

  @Override
  protected ConstraintFunction<ConstraintContext_CanBeChild, Boolean> calculateCanBeChildConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeChild, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeChild context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAChild(context.getNode(), context.getParentNode(), context.getConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
        }

        return result;
      }
    };
  }
  private static boolean staticCanBeAChild(SNode node, SNode parentNode, SAbstractConcept childConcept, SContainmentLink link) {
    return SNodeOperations.isInstanceOf(parentNode, CONCEPTS.test_case$Rc);
  }
  private static final SNodePointer canBeChildBreakingPoint = new SNodePointer("r:5e23154f-77a2-43ba-9ba6-cdf7eabeee47(boLang.test.constraints)", "1681096058453732705");

  private static final class CONCEPTS {
    /*package*/ static final SConcept assert_statement$Y8 = MetaAdapterFactory.getConcept(0xa09f958a0bb141e7L, 0x809fabcf941b13ebL, 0x175473f5556778beL, "boLang.test.structure.assert_statement");
    /*package*/ static final SConcept test_case$Rc = MetaAdapterFactory.getConcept(0xa09f958a0bb141e7L, 0x809fabcf941b13ebL, 0x175473f5555f802fL, "boLang.test.structure.test_case");
  }
}
