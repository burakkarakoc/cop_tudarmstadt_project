package boLang.test.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class execute_single_test_Constraints extends BaseConstraintsDescriptor {
  public execute_single_test_Constraints() {
    super(CONCEPTS.execute_single_test$Pd);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.test$vLAr, this, true, false) {
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return new SNodePointer("r:5e23154f-77a2-43ba-9ba6-cdf7eabeee47(boLang.test.constraints)", "7245198626049957953");
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            return ListScope.forNamedElements(SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getReferenceNode(), LINKS.suite$yJq4), LINKS.tests$ORvN));
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept execute_single_test$Pd = MetaAdapterFactory.getConcept(0xa09f958a0bb141e7L, 0x809fabcf941b13ebL, 0x648c1dc380d824f7L, "boLang.test.structure.execute_single_test");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink test$vLAr = MetaAdapterFactory.getReferenceLink(0xa09f958a0bb141e7L, 0x809fabcf941b13ebL, 0x648c1dc380d824f7L, 0x648c1dc380d824faL, "test");
    /*package*/ static final SReferenceLink suite$yJq4 = MetaAdapterFactory.getReferenceLink(0xa09f958a0bb141e7L, 0x809fabcf941b13ebL, 0x648c1dc380d824f7L, 0x648c1dc380d8252fL, "suite");
    /*package*/ static final SContainmentLink tests$ORvN = MetaAdapterFactory.getContainmentLink(0xa09f958a0bb141e7L, 0x809fabcf941b13ebL, 0x175473f5555f802cL, 0x175473f5555f8032L, "tests");
  }
}
