package boLang.generator.templates;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.typechecking.TypecheckingFacade;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import java.util.Map;
import jetbrains.mps.generator.impl.query.ReductionRuleCondition;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.template.ReductionRuleQueryContext;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.generator.impl.query.SourceNodeQuery;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.generator.impl.query.SourceNodesQuery;
import java.util.Collection;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.generator.impl.query.PropertyValueQuery;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.generator.impl.query.ReferenceTargetQuery;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static boolean rule_Condition_0_0(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.else$u4nB) == null);
  }
  public static boolean rule_Condition_0_1(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.else$u4nB) != null);
  }
  public static Object propertyMacro_GetValue_0_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_0_1(final PropertyMacroContext _context) {
    return Integer.valueOf(SPropertyOperations.getString(_context.getNode(), PROPS.value$t5uN));
  }
  public static Object propertyMacro_GetValue_0_2(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.value$xWYf);
  }
  public static Object propertyMacro_GetValue_1_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object referenceMacro_GetReferent_0_0(final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(_context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(_context.getNode(), LINKS.variable$23yH), "var"), LINKS.localVariableDeclaration$RpjM);
  }
  public static SNode sourceNodeQuery_0_0(final SourceSubstituteMacroNodeContext _context) {
    return TypecheckingFacade.getFromContext().getTypeOf(_context.getNode());
  }
  public static SNode sourceNodeQuery_0_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.value$2v5v);
  }
  public static SNode sourceNodeQuery_0_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.condition$LZbd);
  }
  public static SNode sourceNodeQuery_0_3(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.condition$LZbd);
  }
  public static SNode sourceNodeQuery_0_4(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.else$u4nB);
  }
  public static SNode sourceNodeQuery_0_5(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.declaration$nDy8);
  }
  public static SNode sourceNodeQuery_0_6(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.incrementation$1ujJ);
  }
  public static SNode sourceNodeQuery_0_7(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.condition$1tAG);
  }
  public static SNode sourceNodeQuery_0_8(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.condition$ajvC);
  }
  public static SNode sourceNodeQuery_0_9(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.expr$i6H$);
  }
  public static SNode sourceNodeQuery_2_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$yq_d);
  }
  public static SNode sourceNodeQuery_2_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$yr3f);
  }
  public static SNode sourceNodeQuery_2_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$yq_d);
  }
  public static SNode sourceNodeQuery_2_3(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$yr3f);
  }
  public static SNode sourceNodeQuery_2_4(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$yq_d);
  }
  public static SNode sourceNodeQuery_2_5(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$yr3f);
  }
  public static SNode sourceNodeQuery_2_6(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$yq_d);
  }
  public static SNode sourceNodeQuery_2_7(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$yr3f);
  }
  public static SNode sourceNodeQuery_2_8(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$yq_d);
  }
  public static SNode sourceNodeQuery_2_9(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$yr3f);
  }
  public static SNode sourceNodeQuery_2_10(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$yq_d);
  }
  public static SNode sourceNodeQuery_2_11(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$yr3f);
  }
  public static SNode sourceNodeQuery_2_12(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$yq_d);
  }
  public static SNode sourceNodeQuery_2_13(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$yr3f);
  }
  public static SNode sourceNodeQuery_2_14(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$yq_d);
  }
  public static SNode sourceNodeQuery_2_15(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$yr3f);
  }
  public static SNode sourceNodeQuery_2_16(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$yq_d);
  }
  public static SNode sourceNodeQuery_2_17(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$yr3f);
  }
  public static SNode sourceNodeQuery_2_18(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$yq_d);
  }
  public static SNode sourceNodeQuery_2_19(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$yr3f);
  }
  public static Iterable<SNode> sourceNodesQuery_0_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.then$M4$$);
  }
  public static Iterable<SNode> sourceNodesQuery_0_1(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.then$M4$$);
  }
  public static Iterable<SNode> sourceNodesQuery_0_2(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.content$9YE6);
  }
  public static Iterable<SNode> sourceNodesQuery_0_3(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.content$1vfN);
  }
  public static Iterable<SNode> sourceNodesQuery_0_4(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.content$ajXE);
  }
  public static Iterable<SNode> sourceNodesQuery_1_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.contents$NnI8);
  }
  private final Map<String, ReductionRuleCondition> rrcMethods = new HashMap<String, ReductionRuleCondition>();
  {
    int i = 0;
    rrcMethods.put("347783424598726174", new RRC(i++));
    rrcMethods.put("347783424598751101", new RRC(i++));
  }
  @Override
  @NotNull
  public ReductionRuleCondition getReductionRuleCondition(@NotNull QueryKey identity) {
    ReductionRuleCondition query = identity.forTemplateNode(rrcMethods);
    return (query != null ? query : super.getReductionRuleCondition(identity));
  }
  private static class RRC implements ReductionRuleCondition {
    private final int methodKey;
    public RRC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(ReductionRuleQueryContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.rule_Condition_0_0(ctx);
        case 1:
          return QueriesGenerated.rule_Condition_0_1(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for rule %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, SourceNodeQuery> snqMethods = new HashMap<String, SourceNodeQuery>();
  {
    int i = 0;
    snqMethods.put("347783424595008620", new SNQ(i++));
    snqMethods.put("347783424595008495", new SNQ(i++));
    snqMethods.put("347783424598769356", new SNQ(i++));
    snqMethods.put("347783424598771109", new SNQ(i++));
    snqMethods.put("347783424598773694", new SNQ(i++));
    snqMethods.put("347783424599536192", new SNQ(i++));
    snqMethods.put("347783424599555678", new SNQ(i++));
    snqMethods.put("347783424599555563", new SNQ(i++));
    snqMethods.put("5447448565112179239", new SNQ(i++));
    snqMethods.put("347783424599941083", new SNQ(i++));
    snqMethods.put("7245198626052127025", new SNQ(i++));
    snqMethods.put("7245198626052127707", new SNQ(i++));
    snqMethods.put("7245198626052297733", new SNQ(i++));
    snqMethods.put("7245198626052297741", new SNQ(i++));
    snqMethods.put("7245198626052299603", new SNQ(i++));
    snqMethods.put("7245198626052299611", new SNQ(i++));
    snqMethods.put("7245198626052469510", new SNQ(i++));
    snqMethods.put("7245198626052469518", new SNQ(i++));
    snqMethods.put("347783424596586072", new SNQ(i++));
    snqMethods.put("347783424596586080", new SNQ(i++));
    snqMethods.put("347783424596586091", new SNQ(i++));
    snqMethods.put("347783424596586099", new SNQ(i++));
    snqMethods.put("347783424596586110", new SNQ(i++));
    snqMethods.put("347783424596586118", new SNQ(i++));
    snqMethods.put("347783424596586129", new SNQ(i++));
    snqMethods.put("347783424596586137", new SNQ(i++));
    snqMethods.put("347783424596589644", new SNQ(i++));
    snqMethods.put("347783424596589652", new SNQ(i++));
    snqMethods.put("347783424596595132", new SNQ(i++));
    snqMethods.put("347783424596595140", new SNQ(i++));
  }
  @NotNull
  @Override
  public SourceNodeQuery getSourceNodeQuery(@NotNull QueryKey identity) {
    SourceNodeQuery query = identity.forFunctionNode(snqMethods);
    return (query != null ? query : super.getSourceNodeQuery(identity));
  }
  private static class SNQ implements SourceNodeQuery {
    private final int methodKey;
    public SNQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public SNode evaluate(@NotNull SourceSubstituteMacroNodeContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.sourceNodeQuery_0_0(ctx);
        case 1:
          return QueriesGenerated.sourceNodeQuery_0_1(ctx);
        case 2:
          return QueriesGenerated.sourceNodeQuery_0_2(ctx);
        case 3:
          return QueriesGenerated.sourceNodeQuery_0_3(ctx);
        case 4:
          return QueriesGenerated.sourceNodeQuery_0_4(ctx);
        case 5:
          return QueriesGenerated.sourceNodeQuery_0_5(ctx);
        case 6:
          return QueriesGenerated.sourceNodeQuery_0_6(ctx);
        case 7:
          return QueriesGenerated.sourceNodeQuery_0_7(ctx);
        case 8:
          return QueriesGenerated.sourceNodeQuery_0_8(ctx);
        case 9:
          return QueriesGenerated.sourceNodeQuery_0_9(ctx);
        case 10:
          return QueriesGenerated.sourceNodeQuery_2_0(ctx);
        case 11:
          return QueriesGenerated.sourceNodeQuery_2_1(ctx);
        case 12:
          return QueriesGenerated.sourceNodeQuery_2_2(ctx);
        case 13:
          return QueriesGenerated.sourceNodeQuery_2_3(ctx);
        case 14:
          return QueriesGenerated.sourceNodeQuery_2_4(ctx);
        case 15:
          return QueriesGenerated.sourceNodeQuery_2_5(ctx);
        case 16:
          return QueriesGenerated.sourceNodeQuery_2_6(ctx);
        case 17:
          return QueriesGenerated.sourceNodeQuery_2_7(ctx);
        case 18:
          return QueriesGenerated.sourceNodeQuery_2_8(ctx);
        case 19:
          return QueriesGenerated.sourceNodeQuery_2_9(ctx);
        case 20:
          return QueriesGenerated.sourceNodeQuery_2_10(ctx);
        case 21:
          return QueriesGenerated.sourceNodeQuery_2_11(ctx);
        case 22:
          return QueriesGenerated.sourceNodeQuery_2_12(ctx);
        case 23:
          return QueriesGenerated.sourceNodeQuery_2_13(ctx);
        case 24:
          return QueriesGenerated.sourceNodeQuery_2_14(ctx);
        case 25:
          return QueriesGenerated.sourceNodeQuery_2_15(ctx);
        case 26:
          return QueriesGenerated.sourceNodeQuery_2_16(ctx);
        case 27:
          return QueriesGenerated.sourceNodeQuery_2_17(ctx);
        case 28:
          return QueriesGenerated.sourceNodeQuery_2_18(ctx);
        case 29:
          return QueriesGenerated.sourceNodeQuery_2_19(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, SourceNodesQuery> snsqMethods = new HashMap<String, SourceNodesQuery>();
  {
    int i = 0;
    snsqMethods.put("347783424598770207", new SNsQ(i++));
    snsqMethods.put("347783424598771484", new SNsQ(i++));
    snsqMethods.put("347783424598962142", new SNsQ(i++));
    snsqMethods.put("347783424599555748", new SNsQ(i++));
    snsqMethods.put("5447448565112179592", new SNsQ(i++));
    snsqMethods.put("347783424594310597", new SNsQ(i++));
  }
  @NotNull
  @Override
  public SourceNodesQuery getSourceNodesQuery(@NotNull QueryKey identity) {
    SourceNodesQuery query = identity.forFunctionNode(snsqMethods);
    return (query != null ? query : super.getSourceNodesQuery(identity));
  }
  private static class SNsQ implements SourceNodesQuery {
    private final int methodKey;
    public SNsQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @NotNull
    public Collection<SNode> evaluate(@NotNull SourceSubstituteMacroNodesContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_0_0(ctx));
        case 1:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_0_1(ctx));
        case 2:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_0_2(ctx));
        case 3:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_0_3(ctx));
        case 4:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_0_4(ctx));
        case 5:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_0(ctx));
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, PropertyValueQuery> pvqMethods = new HashMap<String, PropertyValueQuery>();
  {
    int i = 0;
    pvqMethods.put("7245198626051168454", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "x"));
    pvqMethods.put("7245198626052470545", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "1"));
    pvqMethods.put("347783424594777735", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), "dummy"));
    pvqMethods.put("7245198626050251771", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "map_Root"));
  }
  @NotNull
  @Override
  public PropertyValueQuery getPropertyValueQuery(@NotNull QueryKey identity) {
    PropertyValueQuery query = identity.forTemplateNode(pvqMethods);
    return (query != null ? query : super.getPropertyValueQuery(identity));
  }
  private static class PVQ extends PropertyValueQuery.Base {
    private final int methodKey;
    /*package*/ PVQ(int methodKey, SProperty property, String templateValue) {
      super(property, templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull PropertyMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.propertyMacro_GetValue_0_0(ctx);
        case 1:
          return QueriesGenerated.propertyMacro_GetValue_0_1(ctx);
        case 2:
          return QueriesGenerated.propertyMacro_GetValue_0_2(ctx);
        case 3:
          return QueriesGenerated.propertyMacro_GetValue_1_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, ReferenceTargetQuery> rtqMethods = new HashMap<String, ReferenceTargetQuery>();
  {
    rtqMethods.put("347783424596120015", new RTQ(0, null));
  }
  @NotNull
  @Override
  public ReferenceTargetQuery getReferenceTargetQuery(@NotNull QueryKey queryKey) {
    ReferenceTargetQuery query = queryKey.forTemplateNode(rtqMethods);
    return (query != null ? query : super.getReferenceTargetQuery(queryKey));
  }
  private static class RTQ extends ReferenceTargetQuery.Base {
    private final int methodKey;
    /*package*/ RTQ(int methodKey, String templateValue) {
      super(templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull ReferenceMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.referenceMacro_GetReferent_0_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink else$u4nB = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x573f104dc0ece2a4L, 0x4d3932e99eed02bL, "else");
    /*package*/ static final SReferenceLink variable$23yH = MetaAdapterFactory.getReferenceLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x175473f55571ecc0L, 0x175473f55571ecc1L, "variable");
    /*package*/ static final SContainmentLink localVariableDeclaration$RpjM = MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L, 0xf8cc67c7f1L, "localVariableDeclaration");
    /*package*/ static final SContainmentLink value$2v5v = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e672f9L, 0x6d5e2dcd85e741c6L, "value");
    /*package*/ static final SContainmentLink condition$LZbd = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x573f104dc0ece2a4L, 0x573f104dc0ece2bbL, "condition");
    /*package*/ static final SContainmentLink declaration$nDy8 = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x4d3932e9a0042c5L, 0x4d3932e9a0042ccL, "declaration");
    /*package*/ static final SContainmentLink incrementation$1ujJ = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x4d3932e9a0042c5L, 0x4d3932e9a006344L, "incrementation");
    /*package*/ static final SContainmentLink condition$1tAG = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x4d3932e9a0042c5L, 0x4d3932e9a006341L, "condition");
    /*package*/ static final SContainmentLink condition$ajvC = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x4d3932e9a11d52cL, 0x4d3932e9a11d580L, "condition");
    /*package*/ static final SContainmentLink expr$i6H$ = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x353a442069e0ab71L, 0x353a442069e0ab74L, "expr");
    /*package*/ static final SContainmentLink left$yq_d = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e88bddL, 0x6d5e2dcd85e88bdeL, "left");
    /*package*/ static final SContainmentLink right$yr3f = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e88bddL, 0x6d5e2dcd85e88be0L, "right");
    /*package*/ static final SContainmentLink then$M4$$ = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x573f104dc0ece2a4L, 0x573f104dc0ece2bdL, "then");
    /*package*/ static final SContainmentLink content$9YE6 = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x4d3932e99eedb4fL, 0x4d3932e99eeeb24L, "content");
    /*package*/ static final SContainmentLink content$1vfN = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x4d3932e9a0042c5L, 0x4d3932e9a006348L, "content");
    /*package*/ static final SContainmentLink content$ajXE = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x4d3932e9a11d52cL, 0x4d3932e9a11d582L, "content");
    /*package*/ static final SContainmentLink contents$NnI8 = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e546a0L, 0x6d5e2dcd85e6732dL, "contents");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty value$t5uN = MetaAdapterFactory.getProperty(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e741bdL, 0x6d5e2dcd85e741c4L, "value");
    /*package*/ static final SProperty value$xWYf = MetaAdapterFactory.getProperty(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e9da33L, 0x6d5e2dcd85e9da36L, "value");
  }
}
