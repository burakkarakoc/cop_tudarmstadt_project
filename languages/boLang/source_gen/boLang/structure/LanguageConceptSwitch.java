package boLang.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Root = 0;
  public static final int arithmetic_binary_expression = 1;
  public static final int binary_comparison_expression = 2;
  public static final int binary_expression = 3;
  public static final int boolean_type = 4;
  public static final int division_expression = 5;
  public static final int else_statement = 6;
  public static final int empty = 7;
  public static final int equals_expression = 8;
  public static final int expression = 9;
  public static final int expression_statement = 10;
  public static final int for_loop = 11;
  public static final int greater_eq_expression = 12;
  public static final int greater_than_expression = 13;
  public static final int if_statement = 14;
  public static final int integer_type = 15;
  public static final int lower_eq_expression = 16;
  public static final int lower_than_expression = 17;
  public static final int minus_expression = 18;
  public static final int multiplication_expression = 19;
  public static final int not_equals_expression = 20;
  public static final int number_literal = 21;
  public static final int plus_expression = 22;
  public static final int statement = 23;
  public static final int statement_container = 24;
  public static final int string_literal = 25;
  public static final int string_type = 26;
  public static final int type = 27;
  public static final int variable_referance = 28;
  public static final int variables = 29;
  public static final int while_loop = 30;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L);
    builder.put(0x6d5e2dcd85e546a0L, Root);
    builder.put(0x2b4489835f14fa8L, arithmetic_binary_expression);
    builder.put(0x1192bd25563a05b1L, binary_comparison_expression);
    builder.put(0x6d5e2dcd85e88bddL, binary_expression);
    builder.put(0x2b4489835fc2b1eL, boolean_type);
    builder.put(0x6d5e2dcd85e88b7bL, division_expression);
    builder.put(0x4d3932e99eedb4fL, else_statement);
    builder.put(0x6d5e2dcd85e9438dL, empty);
    builder.put(0x6d5e2dcd85e9a7beL, equals_expression);
    builder.put(0x6d5e2dcd85e835b1L, expression);
    builder.put(0x353a442069e0ab71L, expression_statement);
    builder.put(0x4d3932e9a0042c5L, for_loop);
    builder.put(0x1192bd255637d183L, greater_eq_expression);
    builder.put(0x1192bd255637d181L, greater_than_expression);
    builder.put(0x573f104dc0ece2a4L, if_statement);
    builder.put(0x2b4489835fc2b1cL, integer_type);
    builder.put(0x1192bd255637d184L, lower_eq_expression);
    builder.put(0x1192bd255637d182L, lower_than_expression);
    builder.put(0x6d5e2dcd85e88b4aL, minus_expression);
    builder.put(0x6d5e2dcd85e88bacL, multiplication_expression);
    builder.put(0x6d5e2dcd85e9a7bfL, not_equals_expression);
    builder.put(0x6d5e2dcd85e741bdL, number_literal);
    builder.put(0x6d5e2dcd85e88b19L, plus_expression);
    builder.put(0x175473f55568084cL, statement);
    builder.put(0x338fee9b91ffcc37L, statement_container);
    builder.put(0x6d5e2dcd85e9da33L, string_literal);
    builder.put(0x2b4489835fc2b1dL, string_type);
    builder.put(0x2b4489835fc2b0bL, type);
    builder.put(0x175473f55571ecc0L, variable_referance);
    builder.put(0x6d5e2dcd85e672f9L, variables);
    builder.put(0x4d3932e9a11d52cL, while_loop);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
