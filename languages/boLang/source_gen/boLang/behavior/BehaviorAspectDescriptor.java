package boLang.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myelse_statement__BehaviorDescriptor = new else_statement__BehaviorDescriptor();
  private final BHDescriptor myfor_loop__BehaviorDescriptor = new for_loop__BehaviorDescriptor();
  private final BHDescriptor mywhile_loop__BehaviorDescriptor = new while_loop__BehaviorDescriptor();
  private final BHDescriptor mystatement_container__BehaviorDescriptor = new statement_container__BehaviorDescriptor();
  private final BHDescriptor myif_statement__BehaviorDescriptor = new if_statement__BehaviorDescriptor();
  private final BHDescriptor myRoot__BehaviorDescriptor = new Root__BehaviorDescriptor();
  private final BHDescriptor mymultiplication_expression__BehaviorDescriptor = new multiplication_expression__BehaviorDescriptor();
  private final BHDescriptor mybinary_expression__BehaviorDescriptor = new binary_expression__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myRoot__BehaviorDescriptor;
      case 1:
        return mybinary_expression__BehaviorDescriptor;
      case 2:
        return myelse_statement__BehaviorDescriptor;
      case 3:
        return myfor_loop__BehaviorDescriptor;
      case 4:
        return myif_statement__BehaviorDescriptor;
      case 5:
        return mymultiplication_expression__BehaviorDescriptor;
      case 6:
        return mystatement_container__BehaviorDescriptor;
      case 7:
        return mywhile_loop__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e546a0L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e88bddL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x4d3932e99eedb4fL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x4d3932e9a0042c5L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x573f104dc0ece2a4L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e88bacL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x338fee9b91ffcc37L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x4d3932e9a11d52cL)).seal();
}
