package boLang.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import boLang.behavior.statement_container__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public class check_duplicate_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_duplicate_NonTypesystemRule() {
  }
  public void applyRule(final SNode sc, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Set<String> varNames = SetSequence.fromSet(new HashSet<String>());
    for (SNode variable : Sequence.fromIterable(SNodeOperations.ofConcept(statement_container__BehaviorDescriptor.getStatements_id5sZ44R0N6cD.invoke(sc), CONCEPTS.variables$fP))) {
      if (SetSequence.fromSet(varNames).contains(SPropertyOperations.getString(variable, PROPS.name$MnvL))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(variable, "Error: duplicate name found! (" + SPropertyOperations.getString(variable, PROPS.name$MnvL) + ")", "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "1266282413300969333", null, errorTarget);
        }
      }
      SetSequence.fromSet(varNames).addElement(SPropertyOperations.getString(variable, PROPS.name$MnvL));
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.statement_container$MP;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept variables$fP = MetaAdapterFactory.getConcept(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e672f9L, "boLang.structure.variables");
    /*package*/ static final SInterfaceConcept statement_container$MP = MetaAdapterFactory.getInterfaceConcept(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x338fee9b91ffcc37L, "boLang.structure.statement_container");
  }
}
