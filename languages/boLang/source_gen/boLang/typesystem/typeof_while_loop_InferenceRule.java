package boLang.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class typeof_while_loop_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_while_loop_InferenceRule() {
  }
  public void applyRule(final SNode while_loop, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(while_loop, LINKS.condition$ajvC);
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "347783424600308071", 0, null);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "347783424600303900", true), (SNode) createboolean_type_a49797_a1a0c0a0b(), _info_12389875345);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.while_loop$Kf;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static SNode createboolean_type_a49797_a1a0c0a0b() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.boolean_type$UQ);
    return n0.getResult();
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink condition$ajvC = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x4d3932e9a11d52cL, 0x4d3932e9a11d580L, "condition");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept while_loop$Kf = MetaAdapterFactory.getConcept(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x4d3932e9a11d52cL, "boLang.structure.while_loop");
    /*package*/ static final SConcept boolean_type$UQ = MetaAdapterFactory.getConcept(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x2b4489835fc2b1eL, "boLang.structure.boolean_type");
  }
}
