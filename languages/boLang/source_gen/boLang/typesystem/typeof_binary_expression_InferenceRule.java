package boLang.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.IRuleConflictWarningProducer;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public class typeof_binary_expression_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_binary_expression_InferenceRule() {
  }
  public void applyRule(final SNode binary_expression, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      final SNode leftType = typeCheckingContext.typeOf(SLinkOperations.getTarget(binary_expression, LINKS.left$yq_d), "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "1266282413303483385", true);
      typeCheckingContext.whenConcrete(leftType, new Runnable() {
        public void run() {
          {
            final SNode rightType = typeCheckingContext.typeOf(SLinkOperations.getTarget(binary_expression, LINKS.right$yr3f), "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "1266282413303483855", true);
            typeCheckingContext.whenConcrete(rightType, new Runnable() {
              public void run() {
                SNode resultType = typeCheckingContext.getOverloadedOperationType(binary_expression, typeCheckingContext.getExpandedNode(leftType), typeCheckingContext.getExpandedNode(rightType), new IRuleConflictWarningProducer() {
                  public void produceWarning(String modelId, String ruleId) {
                    typeCheckingContext.reportWarning(binary_expression, "coflicting rules for overloaded operation type", modelId, ruleId, null, new NodeMessageTarget());

                  }
                });
                if (resultType != null) {
                  {
                    SNode _nodeToCheck_1029348928467 = binary_expression;
                    EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "1266282413303486434", 0, null);
                    typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "1266282413303485676", true), (SNode) resultType, _info_12389875345);
                  }
                } else {
                  {
                    SNode _nodeToCheck_1029348928467 = binary_expression;
                    EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "1266282413303630372", 0, null);
                    typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "1266282413303629729", true), (SNode) createRuntimeErrorType_8nh7gf_a1a0c0a0a1a0a0b0a1a0a0a0b0a1a0a1(), _info_12389875345);
                  }
                  {
                    final MessageTarget errorTarget = new NodeMessageTarget();
                    IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(binary_expression, "opperation not supported!", "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "1266282413303630928", null, errorTarget);
                  }
                }
              }
            }, "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "1266282413303483805", false, false);
          }
        }
      }, "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "1266282413303482530", false, false);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.binary_expression$Jx;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static SNode createRuntimeErrorType_8nh7gf_a1a0c0a0a1a0a0b0a1a0a0a0b0a1a0a1() {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.RuntimeErrorType$3c);
    n0.setProperty(PROPS.errorText$leWQ, "operation is not supported!");
    return n0.getResult();
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink left$yq_d = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e88bddL, 0x6d5e2dcd85e88bdeL, "left");
    /*package*/ static final SContainmentLink right$yr3f = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e88bddL, 0x6d5e2dcd85e88be0L, "right");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept binary_expression$Jx = MetaAdapterFactory.getConcept(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e88bddL, "boLang.structure.binary_expression");
    /*package*/ static final SConcept RuntimeErrorType$3c = MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x113f84956f9L, "jetbrains.mps.lang.typesystem.structure.RuntimeErrorType");
  }

  private static final class PROPS {
    /*package*/ static final SProperty errorText$leWQ = MetaAdapterFactory.getProperty(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x113f84956f9L, 0x113f84956faL, "errorText");
  }
}
