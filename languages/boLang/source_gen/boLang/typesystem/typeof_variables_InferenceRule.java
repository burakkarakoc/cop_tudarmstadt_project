package boLang.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class typeof_variables_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_variables_InferenceRule() {
  }
  public void applyRule(final SNode variables, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SLinkOperations.getTarget(variables, LINKS.type$6knP) != null) {
      {
        SNode _nodeToCheck_1029348928467 = variables;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "194860502461476734", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "194860502461475922", true), (SNode) SLinkOperations.getTarget(variables, LINKS.type$6knP), _info_12389875345);
      }
      if (!(typeCheckingContext.isSingleTypeComputation())) {
        {
          SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(variables, LINKS.value$2v5v);
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "2611775169798449829", 0, null);
          typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "2611775169798449832", true), (SNode) SLinkOperations.getTarget(variables, LINKS.type$6knP), true, true, _info_12389875345);
        }
      }
    } else {
      {
        SNode _nodeToCheck_1029348928467 = variables;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "3715450569540289609", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "3715450569540289018", true), (SNode) typeCheckingContext.typeOf(SLinkOperations.getTarget(variables, LINKS.value$2v5v), "r:3c263e29-f00c-4a4d-9b86-76824f10d296(boLang.typesystem)", "3715450569540289625", true), _info_12389875345);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.variables$fP;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink type$6knP = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e672f9L, 0x2b4489835fa531aL, "type");
    /*package*/ static final SContainmentLink value$2v5v = MetaAdapterFactory.getContainmentLink(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e672f9L, 0x6d5e2dcd85e741c6L, "value");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept variables$fP = MetaAdapterFactory.getConcept(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e672f9L, "boLang.structure.variables");
  }
}
