package boLang.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Root_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new binary_expression_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new else_statement_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new empty_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new expression_statement_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new for_loop_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new if_statement_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new number_literal_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new string_literal_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new type_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new variable_referance_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new variables_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new while_loop_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_0(String editorComponentId) {
    if ("boLang.editor.DummyForGrammarCells".equals(editorComponentId)) {
      return Collections.singletonList(new DummyForGrammarCells());
    }
    return Collections.emptyList();
  }
  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return getDeclaredEC_0(editorComponentId);
      default:
    }
    return Collections.emptyList();
  }


  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Arrays.asList(new TransformationMenu[]{new IncludeBeforeAfterTransformations(), new template_GrammarCellsSideTransformationsMenu()});
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex3.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_Root());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_arithmetic_binary_expression());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_binary_comparison_expression());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_binary_expression());
      case 4:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_boolean_type());
      case 5:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_division_expression());
      case 6:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_else_statement());
      case 7:
        return Arrays.asList(new SubstituteMenu[]{new GrammarCellsSubstituteMenu_empty(), new empty_SubstituteMenu()});
      case 8:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_equals_expression());
      case 9:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_expression());
      case 10:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_expression_statement());
      case 11:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_for_loop());
      case 12:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_greater_eq_expression());
      case 13:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_greater_than_expression());
      case 14:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_if_statement());
      case 15:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_integer_type());
      case 16:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_lower_eq_expression());
      case 17:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_lower_than_expression());
      case 18:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_minus_expression());
      case 19:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_multiplication_expression());
      case 20:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_not_equals_expression());
      case 21:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_number_literal());
      case 22:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_plus_expression());
      case 23:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_statement());
      case 24:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_statement_container());
      case 25:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_string_literal());
      case 26:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_string_type());
      case 27:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_type());
      case 28:
        return Arrays.asList(new SubstituteMenu[]{new GrammarCellsSubstituteMenu_variable_referance(), new variable_referance_SubstituteMenu()});
      case 29:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_variables());
      case 30:
        return Collections.<SubstituteMenu>singletonList(new GrammarCellsSubstituteMenu_while_loop());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e546a0L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e88bddL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x4d3932e99eedb4fL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e9438dL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x353a442069e0ab71L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x4d3932e9a0042c5L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x573f104dc0ece2a4L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e741bdL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e9da33L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x2b4489835fc2b0bL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x175473f55571ecc0L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e672f9L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x4d3932e9a11d52cL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).seal();
  private static final ConceptSwitchIndex conceptIndex3 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e546a0L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x2b4489835f14fa8L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x1192bd25563a05b1L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e88bddL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x2b4489835fc2b1eL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e88b7bL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x4d3932e99eedb4fL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e9438dL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e9a7beL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e835b1L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x353a442069e0ab71L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x4d3932e9a0042c5L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x1192bd255637d183L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x1192bd255637d181L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x573f104dc0ece2a4L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x2b4489835fc2b1cL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x1192bd255637d184L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x1192bd255637d182L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e88b4aL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e88bacL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e9a7bfL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e741bdL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e88b19L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x175473f55568084cL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x338fee9b91ffcc37L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e9da33L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x2b4489835fc2b1dL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x2b4489835fc2b0bL), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x175473f55571ecc0L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x6d5e2dcd85e672f9L), MetaIdFactory.conceptId(0x69cdfdddbb404ec3L, 0x88aa7abaa38e4365L, 0x4d3932e9a11d52cL)).seal();
}
