package boLang.test.solution.typesys;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Rule;
import jetbrains.mps.lang.test.runtime.RunWithCommand;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.test.runtime.CheckExpectedMessageRunnable;
import jetbrains.mps.errors.MessageStatus;
import jetbrains.mps.project.ProjectBase;
import jetbrains.mps.lang.test.runtime.CheckTypesAction;
import jetbrains.mps.lang.test.runtime.CheckErrorMessagesRunnable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

@MPSLaunch
public class types_Test extends BaseTransformationTest {
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(types_Test.class, "/Users/burakkarakoc/MPSProjects/bonus_sose2022", "r:ca2e9926-9778-4606-875d-3c97521544e4(boLang.test.solution.typesys@tests)", false);
  @Rule
  public final RunWithCommand myWithCommandRule = new RunWithCommand(this);

  public types_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_NodeErrorCheck6410882838580995637() throws Throwable {
    new TestBody(this).test_NodeErrorCheck6410882838580995637();
  }
  @Test
  public void test_NodeErrorCheck6410882838581001346() throws Throwable {
    new TestBody(this).test_NodeErrorCheck6410882838581001346();
  }
  @Test
  public void test_NodeErrorCheck6410882838581174583() throws Throwable {
    new TestBody(this).test_NodeErrorCheck6410882838581174583();
  }
  @Test
  public void test_NodeTypeCheck6410882838581177261() throws Throwable {
    new TestBody(this).test_NodeTypeCheck6410882838581177261();
  }
  @Test
  public void test_ErrorMessagesCheck6410882838581175750() throws Throwable {
    new TestBody(this).test_ErrorMessagesCheck6410882838581175750();
  }

  /*package*/ static class TestBody extends BaseTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }

    public void test_NodeErrorCheck6410882838580995637() throws Exception {
      SNode nodeToCheck = getRealNodeById("6410882838580995527");
      SNode operation = getRealNodeById("6410882838580995637");
      new CheckExpectedMessageRunnable.CheckAnyMessageRunnable(nodeToCheck, MessageStatus.ERROR, "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_NodeErrorCheck6410882838581001346() throws Exception {
      SNode nodeToCheck = getRealNodeById("6410882838581001271");
      SNode operation = getRealNodeById("6410882838581001346");
      new CheckExpectedMessageRunnable.CheckAnyMessageRunnable(nodeToCheck, MessageStatus.ERROR, "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_NodeErrorCheck6410882838581174583() throws Exception {
      SNode nodeToCheck = getRealNodeById("6410882838581173077");
      SNode operation = getRealNodeById("6410882838581174583");
      new CheckExpectedMessageRunnable.CheckAnyMessageRunnable(nodeToCheck, MessageStatus.ERROR, "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_NodeTypeCheck6410882838581177261() throws Exception {
      SNode nodeToCheck = getRealNodeById("6410882838581175384");
      SNode operation = getRealNodeById("6410882838581177261");
      addNodeById("6410882838581177310");
      new CheckTypesAction.CheckComputedType(nodeToCheck).checkTypeIs(getNodeById("6410882838581177310"));
    }
    public void test_ErrorMessagesCheck6410882838581175750() throws Exception {
      SNode nodeToCheck = getRealNodeById("6410882838581175368");
      SNode operation = getRealNodeById("6410882838581175750");
      new CheckErrorMessagesRunnable(nodeToCheck, false, false, ((ProjectBase) myProject).getPlatform()).includeSelf(true).exclude(ListSequence.fromList(new ArrayList<CheckExpectedMessageRunnable>())).run();
    }

  }
}
